#include "EventsHandler.h"


using namespace serial;


EventsHandler::EventsHandler() {
    serial.setPort("/dev/ttyACM0");
    serial.setBaudrate(9600);
    t.simpleTimeout(2000);
    serial.setTimeout(t);
}

EventsHandler::~EventsHandler() {
	serial.close();
}

void EventsHandler::turnOnLight(int idx) {
	try {
		switch(idx) {
		case 1:
			serial.write("A");
			break;
		case 2:
			serial.write("C");
			break;
		case 3:
			serial.write("E");
			break;
		}
	}
	catch(PortNotOpenedException) {
        serial.close();
        trySerialConnection();
	}
	catch(SerialException){
        serial.close();
        trySerialConnection();
	}

}

void EventsHandler::turnOffLight(int idx) {
	try {
		switch(idx) {
		case 1:
			serial.write("B");
			break;
		case 2:
			serial.write("D");
			break;
		case 3:
			serial.write("F");
			break;
		}
	}
	catch(PortNotOpenedException) {
        serial.close();
        trySerialConnection();
	}
    catch(SerialException){
        serial.close();
        trySerialConnection();
	}

}

void EventsHandler::trySerialConnection() {
        try {
            serial.open();
        }
        catch(IOException) {
            serial.close();
        }
        catch(SerialException){
            serial.close();
	}
}


void EventsHandler::trackMousePositionOnWindow(sf::RenderWindow &window) {
	sf::Vector2i mousePos = sf::Mouse::getPosition(window);
	clickedPoint = sf::Vector2f(mousePos.x, mousePos.y);
}

bool EventsHandler::serialIsOpen()
{
    return serial.isOpen();
}

sf::Vector2f EventsHandler::getClickedPoint()
{
    return clickedPoint;
}

void EventsHandler::checkConnection(){
    if(!serial.isOpen()){
        trySerialConnection();
    }
}
